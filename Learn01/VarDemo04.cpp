#include <iostream> 
using namespace std;


/**
 * 这个程序演示了有符号整数和无符号整数之间的差别 
 * 反码,补码(https://www.cnblogs.com/shamo89/p/9846385.html) 
 */ 
 
//int main(){
//       
//    short int i;          // 有符号短整数 
//	short unsigned int j; // 无符号短整数 
//         	
//    j = 50000;
//	i = j;
//	
//	cout << i << " "  << j;
//	
//	return 0;	
//}

	// const  const类型的对象在程序执行期间不能被修改改变
	// volatile 修饰符volatile 告诉编译器不需要优化volatile声明的变量, 让程序可以直接从内存中读取变量.
    //	        对于一般的变量编译器会对变量进行优化,将内存中的变量值放在寄存器中以加快读写效率 
    
    // restrict 由restrict修饰的指针是唯一一种访问它所指向的对象的方式. 只有C99增加了新的类型限定符 restrict. 
    
    // 反码,补码
    
    /**
	    对于有符号数而言：
	
	      (1)二进制的最高位是符号位：0表示正数，1表示负数
	
	      (2)正数的原码、反码、补码都一样；
	
	      (3)负数的反码 =  它的原码符号位不变，其他位取反（0 ->1 ; 1->0 ）；
	
	      (4)负数的补码 = 它的反码 +1；
	
	      (5)0的反码、补码都是0；
	
	      (6)在计算机运算的时候，都是以补码的方式来运算的；
	*
	* 50000 二进制->
	* 正数,原码,反码,补码都一样 
	* 原码: 1100 0011 0101 0000 
	* 反码: 1100 0011 0101 0000 
	* 补码: 1100 0011 0101 0000 
	* 
	* 转换成有符号短整数 首位变成符号位1是负数 
	* 补码-1 -> 反码 
	* 1100 0011 0100 1111
	* 反码 -> 原码 
	* 1011 1100 1011 0000 
	* 首位是负数 
	* 0011 1100 1011 0000  = 15536
	* 结果为-15536 
	*/	 
